version: 2.1

orbs:
  slack: circleci/slack@3.4.0
  aws-cli: circleci/aws-cli@0.1.16
  jq: circleci/jq@1.9.0

jobs:
  build:
    docker:
      - image: circleci/php:7.1.32-fpm-node
    working_directory: ~/jobHunter
    executor: aws-cli/default
    environment:
      - DOCKER_REPO: mouwang
      - DOCKER_IMAGE: jobhunter-nginx-php
      - CLUSTER_NAME: FargateStack-fargateserviceautoscalingD107CF93-1L43D3RJL9411
      - SERVICE_NAME: FargateStack-nameserviceServiceE5769334-J159BD0XSLXY
      - APP_KEY: BNx7BhfE6D3QCntRKJWLsAOEGmOEdaWn
      - CLOUDSEARCH_DOMAIN: https://doc-job-hunter-fhccdpwhbxzcjpv7njooweyjtq.us-west-2.cloudsearch.amazonaws.com
      - AWS_REGION: us-west-2
      - LIGHTSAIL_IP: 52.68.244.159
      - ZIPFILE_NAME: jobHunter-code.tar.gz
      - TEST_CODENAME: Dexter003
    steps:
      - checkout
#      - aws-cli/setup
#      - jq/install
      - setup_remote_docker
#      - run:
#          name: check AWS Cli env
#          command: aws --version
      - add_ssh_keys:
          fingerprints:
            - "8d:29:e0:9e:a2:27:75:cc:bd:11:28:2d:5b:37:c7:6b" # mouCodes2020
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: composer install -n --prefer-dist

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor

      # NodeJS - Node Modules
      - restore_cache:
          keys:
            - node-v1-{{ checksum "package.json" }}
            - node-v1-

      - run: npm install

      - save_cache:
          key: node-v1-{{ checksum "package.json" }}
          paths:
            - node_modules

      - run:
          name: Show Current Location
          command: pwd

      - run:
          name: Install phpUnit 7.5 phar
          command: |
            wget https://phar.phpunit.de/phpunit-7.5.phar
            chmod +x phpunit-7.5.phar
            mv phpunit-7.5.phar phpunit

      - run:
          name: Run Unit Test
          command: |
            ./vendor/bin/phpunit --exclude-group ignore --testdox

  ## Docker Related
      - run:
          name: Docker Hub Login
          command: echo "${DOCKER_PASS}" | docker login --username ${DOCKER_USER} --password-stdin

      - run:
          name: Check Docker Version
          command: docker -v

      - run:
          name: Create folder for DockerImage
          command: mkdir /tmp/build

      - run:
          name: Copy Dockerfile settings
          command: |
            cp .circleci/Dockerfile /tmp/build

#            cp .circleci/taskTemp.json .
#      - run:
#          name: Use jQ to eject current image build number
#          command: jq '.containerDefinitions[0].image = "mouwang/jobhunter-nginx-php:0.1."'+'env.CIRCLE_BUILD_NUM' taskTemp.json > taskDef.json
#
#      - run:
#          name: Check the taskDef.json
#          command: cat taskDef.json

      - run:
          name: Copying files to build folder
          command: cp -r ./* /tmp/build

      - run:
          name: Modify Folder Right
          command: chmod 777 -R /tmp/build/storage

      - slack/notify:
          channel: 'jobhunter-ci'
          title: "[jobHunter] ImageBuilding"
          message: "${DOCKER_REPO}/${DOCKER_IMAGE}: 0.1.${CIRCLE_BUILD_NUM}"
          color: "#42e2f4" # Optional: Assign custom colors for each notification
          webhook: ${SLACK_WEBHOOK} # Optional: Enter a specific webhook here or the default will use $SLACK_WEBHOOK

      - run:
          name: Move to Build Folder && Build
          command: |
            cd /tmp/build &&
            docker build -t ${DOCKER_REPO}/${DOCKER_IMAGE}:0.1.${CIRCLE_BUILD_NUM} .

      - run:
          name: Push to Docker Hub
          command: docker push ${DOCKER_REPO}/${DOCKER_IMAGE}:0.1.${CIRCLE_BUILD_NUM}

## AWS LightSail (VM Server)

      # This one for checking.
      - run:
          name: Create DockerDir
          command:  mkdir /tmp/deploy

      - run:
          name: Inject Env (secret)
          command: |
            EnvString="APP_KEY=${APP_KEY}\nAPP_DEBUG=TRUE\nAWS_ACCESS_KEY=${AWS_ACCESS_KEY}\nAWS_ACCESS_SECRET=${AWS_ACCESS_SECRET}\nAWS_REGION=${AWS_REGION}\nTEST_CODENAME=${TEST_CODENAME}\nAWS_CLOUDSEARCH_ENDPOINT=${CLOUDSEARCH_DOMAIN}\nBUILD_NUM=${CIRCLE_BUILD_NUM}"
            echo -e "${EnvString}" >> /tmp/deploy/.env

      - run:
          name: Copy the Update Script
          command: |
            cp .circleci/updateDocker.sh /tmp/deploy

      - run:
          name: Remote Server Preparing update [Create Deploy Folder]
          command: ssh -o StrictHostKeyChecking=no ubuntu@${LIGHTSAIL_IP} " cd /tmp && mkdir jobHunter_deploy"

      - run:
          name: Scp - Copy the file to remote server [Copying Files Over]
          command: scp -o StrictHostKeyChecking=no -P 22 /tmp/deploy/.env /tmp/deploy/updateDocker.sh ubuntu@${LIGHTSAIL_IP}:/tmp/jobHunter_deploy

      - run:
          name: Make the Update
          command: ssh ubuntu@${LIGHTSAIL_IP} " cd /tmp/jobHunter_deploy && chmod +x updateDocker.sh && ./updateDocker.sh "

      ## FargateSide
#
#      - run:
#          name: Register New TaskDef
#          command: aws ecs register-task-definition --cli-input-json file://taskDef.json >> results.json
#      - run:
#          name: Copy the UpdateService File
#          command: cp .circleci/updateService.sh .
#
#      - run:
#          name: Get the Revision Number and pass to reg
#          command: |
#            export REVISION=$( jq '.taskDefinition.revision' results.json )
#            echo $REVISION
#            ./updateService.sh
#      - run:
#          name: Trigger the update!
#          command: ./updateService.sh
#      - run:
#          name: AWS ECS Force Update
#          command: aws ecs update-service --cluster ${CLUSTER_NAME} --service ${SERVICE_NAME} --force-new-deployment

      - slack/status:
          channel: 'jobhunter-ci'
          failure_message: "CI build Fail! , Check CircleCI"
          fail_only: true
          webhook: ${SLACK_WEBHOOK} # Optional: Enter a specific webhook here or the default will use $SLACK_WEBHOOK

      - slack/notify:
          channel: 'jobhunter-ci'
          title: "https://jobhunter.manycat.com.tw CI build Finished."
          message: "${DOCKER_REPO}/${DOCKER_IMAGE}: 0.1.${CIRCLE_BUILD_NUM}"
          color: "#42e2f4" # Optional: Assign custom colors for each notification
          webhook: ${SLACK_WEBHOOK} # Optional: Enter a specific webhook here or the default will use $SLACK_WEBHOOK

workflows:
  version: 2.1
  build_and_auto_deploy:
    jobs:
      - build:
          filters:
            branches:
              only:
                - master_lightSail
