version: 2.1

orbs:
  slack: circleci/slack@3.4.0
  aws-cli: circleci/aws-cli@0.1.16
  jq: circleci/jq@1.9.0

jobs:
  build:
    docker:
      - image: circleci/php:7.1.32-fpm-node
    working_directory: ~/jobHunter
    executor: aws-cli/default
    environment:
      - DOCKER_REPO: mouwang
      - DOCKER_IMAGE: jobhunter-nginx-php
      - CLUSTER_NAME: FargateStack-fargateserviceautoscalingD107CF93-10UIXIP3G84N5
      - SERVICE_NAME: FargateStack-nameserviceServiceE5769334-YH1WVQUWCKP9
      - APP_KEY: BNx7BhfE6D3QCntRKJWLsAOEGmOEdaWn
    steps:
      - checkout
      - aws-cli/setup
      - jq/install
      - setup_remote_docker
      - run:
          name: check AWS Cli env
          command: aws --version
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: composer install -n --prefer-dist

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor

      # NodeJS - Node Modules
      - restore_cache:
          keys:
            - node-v1-{{ checksum "package.json" }}
            - node-v1-

      - run: npm install

      - save_cache:
          key: node-v1-{{ checksum "package.json" }}
          paths:
            - node_modules

      - run:
          name: Show Current Location
          command: pwd

      - run:
          name: Install phpUnit 7.5 phar
          command: |
            wget https://phar.phpunit.de/phpunit-7.5.phar
            chmod +x phpunit-7.5.phar
            mv phpunit-7.5.phar phpunit

      - run:
          name: Run Unit Test
          command: |
            ./vendor/bin/phpunit --exclude-group ignore --testdox

  ## Docker Related
      - run:
          name: Docker Hub Login
          command: echo "${DOCKER_PASS}" | docker login --username ${DOCKER_USER} --password-stdin

      - run:
          name: Check Docker Version
          command: docker -v

      - run:
          name: Create folder for DockerImage
          command: mkdir /tmp/build

      - run:
          name: Copy Dockerfile settings, TaskDef
          command: |
            cp .circleci/Dockerfile /tmp/build
            cp .circleci/taskTemp.json .

      - run:
          name: Use jQ to eject current image build number
          command: jq '.containerDefinitions[0].image = "mouwang/jobhunter-nginx-php:0.1."'+'env.CIRCLE_BUILD_NUM' taskTemp.json > taskDef.json

      - run:
          name: Check the taskDef.json
          command: cat taskDef.json

      - run:
          name: Create folder for DockerImage
          command: cp -r ./* /tmp/build

      # This one for checking.
      - run:
          name: Inject Env (non-secret)
          command: echo APP_KEY=${APP_KEY} >> /tmp/build/.env

      - run:
          name: Move to Build Folder && Build
          command: |
            cd /tmp/build &&
            docker build -t ${DOCKER_REPO}/${DOCKER_IMAGE}:0.1.${CIRCLE_BUILD_NUM} .

      - run:
          name: Push to Docker Hub
          command: docker push ${DOCKER_REPO}/${DOCKER_IMAGE}:0.1.${CIRCLE_BUILD_NUM}

      - run:
          name: Register New TaskDef
          command: aws ecs register-task-definition --cli-input-json file://taskDef.json >> results.json

      - run:
          name: Get the Revision Number and pass to reg
          command: REVISION=$( jq '.taskDefinition.revision' results.json )

      - run:
          name: Copy the UpdateService
          command: cp .circleci/updateService.sh .

      - run:
          name: Trigger the update!
          command: ./updateService.sh

#      - run:
#          name: AWS ECS Force Update
#          command: aws ecs update-service --cluster ${CLUSTER_NAME} --service ${SERVICE_NAME} --force-new-deployment

      - slack/status:
          channel: 'jobhunter-ci'
          failure_message: "CI build Fail! , Check CircleCI"
          fail_only: true
          webhook: ${SLACK_WEBHOOK} # Optional: Enter a specific webhook here or the default will use $SLACK_WEBHOOK

      - slack/notify:
          channel: 'jobhunter-ci'
          title: "https://jobhunter.manycat.com.tw CI build Finished."
          message: "${DOCKER_REPO}/${DOCKER_IMAGE}: 0.1.${CIRCLE_BUILD_NUM}"
          color: "#42e2f4" # Optional: Assign custom colors for each notification
          webhook: ${SLACK_WEBHOOK} # Optional: Enter a specific webhook here or the default will use $SLACK_WEBHOOK

workflows:
  version: 2.1
  build_and_auto_deploy:
    jobs:
      - build:
          filters:
            branches:
              only:
                - master
                - 001_Refactor_MySQL
